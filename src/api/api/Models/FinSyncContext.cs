using Microsoft.EntityFrameworkCore;
using FinSync.Models;

namespace FinSync.Data
{
    public class FinSyncContext : DbContext
    {
        public FinSyncContext(DbContextOptions<FinSyncContext> options)
            : base(options)
        {
        }

        public DbSet<User> Users { get; set; }
        public DbSet<Expense> Expenses { get; set; }
        public DbSet<Budget> Budgets { get; set; }
        public DbSet<Goal> Goals { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<ApiKey> ApiKeys { get; set; }
        public DbSet<Income> Incomes { get; set; }
        // ⭐ Added the DbSet for RecurringIncomeSchedule ⭐
        public DbSet<RecurringIncomeSchedule> RecurringIncomeSchedules { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Always call the base method first to apply default EF Core conventions.
            base.OnModelCreating(modelBuilder);

            // Configure unique index for Usernames to prevent duplicates
            modelBuilder.Entity<User>()
                .HasIndex(u => u.Username)
                .IsUnique();

            // Configure unique index for CategoryNames to prevent duplicates
            modelBuilder.Entity<Category>()
                .HasIndex(c => c.CategoryName)
                .IsUnique();

            // Seed initial category data
            modelBuilder.Entity<Category>().HasData(
                new Category { CategoryId = 1, CategoryName = "Alimentação" },
                new Category { CategoryId = 2, CategoryName = "Transporte" },
                new Category { CategoryId = 3, CategoryName = "Habitação" },
                new Category { CategoryId = 4, CategoryName = "Educação" }
            );

            // ⭐ Configure unique index for recurring income occurrences ⭐
            // This prevents duplicate income entries generated by the job for the same schedule and date.
            // The HasFilter("[RecurringScheduleId] IS NOT NULL") ensures this constraint only applies
            // to incomes linked to a recurring schedule, not one-time incomes.
            modelBuilder.Entity<Income>()
                .HasIndex(i => new { i.RecurringScheduleId, i.Date })
                .IsUnique()
                .HasFilter("[RecurringScheduleId] IS NOT NULL");

            // ⭐ Ensure correct precision for decimal currency fields ⭐
            // This helps prevent floating-point inaccuracies and ensures correct storage in the database.
            modelBuilder.Entity<Income>()
                .Property(i => i.Amount)
                .HasColumnType("decimal(18, 2)"); // 18 total digits, 2 after the decimal point

            modelBuilder.Entity<RecurringIncomeSchedule>()
                .Property(ris => ris.Amount)
                .HasColumnType("decimal(18, 2)"); // Same precision for recurring amounts

            // Optional: Define relationships if you have navigation properties in your models
            // Example if you have a User navigation property in Income and RecurringIncomeSchedule:
            /*
            modelBuilder.Entity<Income>()
                .HasOne(i => i.User)
                .WithMany() // Or .WithMany(u => u.Incomes) if User has an Incomes collection
                .HasForeignKey(i => i.UserId)
                .OnDelete(DeleteBehavior.Restrict); // Or .Cascade, depending on your desired behavior

            modelBuilder.Entity<RecurringIncomeSchedule>()
                .HasOne(ris => ris.User)
                .WithMany() // Or .WithMany(u => u.RecurringIncomeSchedules)
                .HasForeignKey(ris => ris.UserId)
                .OnDelete(DeleteBehavior.Restrict);
            */

            // Link Income occurrences back to their RecurringIncomeSchedule source
            modelBuilder.Entity<Income>()
                .HasOne(i => i.RecurringSchedule)
                .WithMany() // If RecurringIncomeSchedule doesn't have a collection of Incomes
                .HasForeignKey(i => i.RecurringScheduleId)
                .IsRequired(false) // RecurringScheduleId is nullable
                .OnDelete(DeleteBehavior.Restrict); // Prevent cascading deletes of schedules if an income is deleted
        }
    }
}
